#!/bin/bash
#
# changelog
#  2021-05-22  :: Created
#
#───────────────────────────────( requirements )────────────────────────────────
# Validation. Example, ensure the user has not passed 'name1,name2,'. We may
# be able to correct these in-place, and warn the user. Draft out effectively a
# specsheet detailing the allowed components of each part. Huh, this is starting
# to sound like good use of practicing some mad basic EBNF. Still haven't played
# arround with it.
#
#───────────────────────────────────( todo )────────────────────────────────────
# 1. [ ] Make unique exits. This is a case for which ns-grep would be very
#        useful.
#
#══════════════════════════════════╡ GLOBAL ╞═══════════════════════════════════
PROGDIR=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd )

CONFDIR="${XDG_CONFIG_HOME:-$HOME/.config}/hre-utils/conf"
DATABASE="${CONFDIR}/database"
CONFFILE="${CONFDIR}/config"

#──────────────────────────────────( source )───────────────────────────────────
source $(which hre-lib-import.sh) || exit 1
source "${CONFFILE}"
# TODO: Do we want to use mkconf instead of importing the config file?

.import colors

#═════════════════════════════════╡ FUNCTIONS ╞═════════════════════════════════
#───────────────────────────────────( utils )───────────────────────────────────
function usage {
cat <<EOF
USAGE: ./$(basename "${BASH_SOURCE[0]}") [OPTION] (COMMAND | NAME)

Options:
   -a | --add PATH       * Creates new database entry for PATH, idenfied as NAME
   -t | --tag TAG[:TAG]  * Add tag(s) to database entry for sorting or filtering
   -d | --debug LO[,HI]  * Sets debug level to filter unncessary output messages
                           NOTE: Defaults LOW to 2 (WARN), levels <0 are garbage
Commands:
   --ls                  * Lists all entries in the database, columnizing output
   --tls TAG             * Search in database for entries matching specified TAG
   --column              * In-place modifies database file to even width columns
   --sort NUM[,NUM]      * In-place sorts database file by the specified col NUM
   --edit (db|conf)      * Opens \`conf\`s own confuration file for manual editing
                           NOTE: As this is a manual action, it does not trigger
                           any auto_ features, such as auto_sort or auto_column.
EOF

exit $1
}


function write {
   local lvl=$1 text="$2"

   local debug_level=${__debug_level__:-$debug_level}
   read low high __ <<< ${debug_level//,/ }
   low=${low:-2} ; high=${high:-3}

   [[ $lvl -lt $low  ]] && return 0
   [[ $lvl -gt $high ]] && return 0

   local lvlname color
   case $lvl in
     -2) color="${bk}"  ; lvlname='TRASH' ;;
     -1) color="${bk}"  ; lvlname='NOISE' ;;
      0) color="${cy}"  ; lvlname='DEBUG' ;;
      1) color="${wh}"  ; lvlname='INFO'  ;;    # <- default user-visible from
      2) color="${yl}"  ; lvlname='WARN'  ;;    #    here down
      3) color="${brd}" ; lvlname='CRIT'  ;;

      *) color="${wh}"  ; lvlname='INFO'  ;;
   esac

   #printf "${color}[%-5s] %s${rst}\n"  "$lvlname"  "$text"
   echo -e "${color}[$lvlname] ${text}${rst}"
}


function get_editor {
   if [[ -n $editor ]] ; then
      echo "$editor"
   elif [[ -n $EDITOR ]] ; then
      echo "$EDITOR"
   elif [[ $(which vim 2>/dev/null) ]] ; then
      echo 'vim'
   elif [[ $(which emacs 2>/dev/null) ]] ; then
      echo 'emacs'
   fi
}


function do_auto_column {
   local columned=$( column -t "$DATABASE" )
   echo "$columned" > "$DATABASE"
}


function do_auto_sort {
   local col=${1:-$auto_sort}

   if [[ ! $col =~ ^[[:digit:]](,[[:digit:]])?$ ]] ; then
      write 2 "Invalid --sort param ($col)"
      col=2
   fi

   local sorted=$( sort -k "$col" "$DATABASE" )
   echo "$sorted" > "$DATABASE"
}


function list_by_tag {
   local search="$1"

   column -t < <(
      awk "\$3 ~ /(^|:)($search)(\$|:)/ {print \$1 \" \" \$2}"  "${DATABASE}"
   )
}


function edit_internal {
   case $1 in
      d|db|data|database|'')
            file="${DATABASE}"
            ;;

      c|conf|config)
            file="${CONFFILE}"
            ;;

      *)    write 2 "Invalid param for --edit ($1). Defaulting to 'database'"
            file="${DATABASE}" ;;
   esac

   exec $editor $file
}


function edit_file {
   local name=$__name__
   local path=$(
      awk "\$2 ~ /(^|,)($name)(\$|,)/ {print \$1}"  "${DATABASE}"
   )

   if [[ -z $path ]] ; then
      write 3 "No entry found matching '$name'"
      exit 1
   fi

   if [[ $(wc -l <<< "$path") -gt 1 ]] ; then
      write 3 "Multiple files with the same NAME ($name) found"
      exit 2
   fi

   exec $editor $path
}


function apply_tag {
   if [[ ! $__tags__ =~ ^[[:alnum:]_-]+(:[[:alnum:]_-]+)* ]] ; then
      write 3 "Invalid tag format--requires TAG[:TAG]*"
      exit 1
   fi

   local name=$__name__
   local row=$(
      awk "\$2 ~ /(^|,)($name)(\$|,)/ {print \$1 \$3}"  "${DATABASE}"
   )

   if [[ -z $row ]] ; then
      write 3 "No entry found matching '$name'"
      exit 1
   fi

   if [[ $(wc -l <<< "$path") -gt 1 ]] ; then
      write 3 "Multiple files with the same NAME ($name) found"
      exit 1
   fi

   local path existing_tags new_tags

   read -r path existing_tags <<< "$row"
   _new_tags=$( sort <<< "${__tags__//,/$'\n'}")
   new_tags="${_new_tags//$'\n'/,}"

   local buffer=''
}


function add_entry {
   if [[ ! $__name__ =~ ^[[:alnum:]_-]+(,[[:alnum:]_-]+)* ]] ; then
      write 3 "Invalid name format--required NAME[,NAME]*"
      exit 1
   fi

   if $__tag__ ; then
      _tags=$( sort <<< "${__tags__//,/$'\n'}")
      tags="${_tags//$'\n'/,}"
   fi

   echo "${__path__} ${__name__}${tags:+ }${tags}" >> "${DATABASE}"
}


function validate_argparse {
   declare -ga ERRORS_ARGPARSE

   if [[ ${#__positional__[@]} -ne 1 ]] ; then
      ERRORS_ARGPARSE+=( "NAME not specified" )
   else
      __name__="${__positional__[0]}"
   fi

   if [[ ${#__invalid__[@]} -gt 0 ]] ; then
      ERRORS_ARGPARSE+=( "Invalid option(s): ${__invalid__[@]}" )
   fi

   if [[ ${#ERRORS_ARGPARSE[@]} -gt 0 ]] ; then
      write 3 "Errors in argument parsing"

      for idx in "${!ERRORS_ARGPARSE[@]}" ; do
         err="${ERRORS_ARGPARSE[$idx]}"
         echo "  $((idx+1)). $err"
      done

      exit 1
   fi
}

function validate_database {
   declare -A used_names

   # Validation
   declare -a duplicate_name
   declare -a path_not_exist
   declare -a invalid_name_format
   declare -a invalid_tag_format

   declare -a validation_warnings
   declare -a validation_critical

   while IFS=$'\n' read -r line ; do
      # If the file is empty, nothing to validate:
      [[ -z "$line" ]] && return 0

      read -r path names tags <<< "$line"

      #─────────────────────────────( paths )───────────────────────────────────
      [[ "$path" =~ ^~ ]] && path="${path/\~/$HOME}"
      [[ ! -e "$path" ]] && path_not_exist+=( "$path" )

      #─────────────────────────────( names )───────────────────────────────────
      if [[ ! "$names" =~ ^[[:alnum:]_-]+(,[[:alnum:]_-]+)*$ ]] ; then
         invalid_name_format+=( "$names" )
      fi

      declare -a _names=( ${names//,/ } )
      for n in "${_names[@]}" ; do
         ${used_names[$n]:-false} && duplicate_name+=( "$n" )
         used_names[$n]=true
      done

      #─────────────────────────────( tags )────────────────────────────────────
      if [[ ! "$tags" =~ ^[[:alnum:]_-]+(:[[:alnum:]_-]+)*$ ]] ; then
         invalid_tag_format+=( "$tags" )
      fi
   done < "${DATABASE}"

   # Warnings:
   [[ ${#path_not_exist[@]} -gt 0 ]] && {
      local _paths=''
      for p in "${path_not_exist[@]}" ; do
         _paths+="   ${_paths:+$'\n'}${p}"
      done
      validation_warnings+=( "The following paths do not exist:\n${_paths}" )
   }

   [[ ${#validation_warnings[@]} -gt 0 ]] && {
      for warn_msg in "${validation_warnings[@]}" ; do
         write 2 "$warn_msg"
      done
   }

   # Critical:
   [[ ${#duplicate_name[@]} -gt 0 ]] && {
      local _names=''
      for n in "${duplicate_name[@]}" ; do
         _names+="   ${_names:+$'\n'}${n}"
      done
      validation_critical+=( "Duplicate names found:\n${_names}" )
   }

   [[ ${#invalid_name_format[@]} -gt 0 ]] && {
      local _names=''
      for n in "${invalid_name_format[@]}" ; do
         _names+="   ${_names:+$'\n'}${n}"
      done
      validation_critical+=( "Invalid name format:\n${_names}" )
   }

   [[ ${#invalid_tag_format[@]} -gt 0 ]] && {
      local _tags=''
      for t in "${invalid_tag_format[@]}" ; do
         _tags+="   ${_tags:+$'\n'}${t}"
      done
      validation_critical+=( "Invalid tag format:\n${_tags}" )
   }

   [[ ${#validation_critical[@]} -gt 0 ]] && {
      for crit_msg in "${validation_critical[@]}" ; do
         write 3 "$crit_msg"
      done
      exit 1
   }

   return 0
}

#══════════════════════════════════╡ ENGAGE ╞═══════════════════════════════════
[[ $# -eq 0 ]] && usage 1

editor=$( get_editor )
if [[ -z $editor ]] ; then
   write 3 "Editor is unset, specify in config file."
   exit 1
fi

#─────────────────────────────────( argparse )──────────────────────────────────
# Defaults
__add__=false
__tag__=false

while [[ $# -gt 0 ]] ; do
   case $1 in
      -h|--help)
            usage 0 ;;

      # Options:
      -d|--debug)
            shift ; __debug_level__="$1"
            shift ;;

      -a|--add)
            __add__=true
            shift ; __path__="$1"
            shift ;;

      -t|--tag)
            __tag__=true
            shift ; __tags__="$1"
            shift ;;

      # Commands:
      --edit)
            shift
            edit_internal "$1" ;;

      --column)
            do_auto_column
            exit 0 ;;

      --sort)
            shift
            do_auto_sort ${1:-2}
            exit 0 ;;

      --ls)
            cat "${DATABASE}"
            exit 0 ;;

      --lst)
            shift
            list_by_tag "$1"
            exit 0 ;;

      --validate)
            validate_database
            exit $? ;;

      # Defaults:
      -*) __invalid__+=( $1 ) ; shift ;;

      *) __positional__+=( "$1" ) ; shift ;;
   esac
done

#──────────────────────────────────( do shit )──────────────────────────────────
validate_database
validate_argparse

# Options:
if $__add__ ; then
   add_entry
elif $__tag__ ; then
   apply_tag
else
   edit_file
fi

[[ $auto_column =~ ([Yy]es|[Tt]rue)  ]] && do_auto_column
[[ ! $auto_sort =~ (|[Nn]o|[Ff]alse) ]] && do_auto_sort
